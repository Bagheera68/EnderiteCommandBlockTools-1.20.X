plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = '1.0-1.20.1'
group = 'net.Bagheerawithae.ecbtcws'
archivesBaseName = 'commandblocktools'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    mappings channel: 'official', version: '1.20.1'

    runs {
        client {
            workingDirectory project.file('run')

            arg "-mixin.config=ecbtcws.mixins.json"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'ecbtcws'

            mods {
                ecbtcws {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            arg "-mixin.config=ecbtcws.mixins.json"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'ecbtcws'

            mods {
                ecbtcws {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'ecbtcws'

            mods {
                ecbtcws {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'ecbtcws', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                ecbtcws {
                    source sourceSets.main
                }
            }
        }
    }
}


sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url "https://www.cursemaven.com" }

    maven { url "https://repo.spongepowered.org/maven"}

    maven { url = 'https://files.minecraftforge.net/maven' }

    mavenCentral()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.20.1-47.2.32'

    implementation fg.deobf("curse.maven:crackers-wither-storm-mod-621405:5331898")

    implementation fg.deobf("curse.maven:enderite-mod-for-forge-401284:5017690")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

mixin {
    // MixinGradle Settings
    add sourceSets.main, 'ecbtcws.refmap.json'
    config 'ecbtcws.mixins.json'

    debug.verbose = true
    debug.export = true

}

compileJava {
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
}

jar{
    manifest {
        attributes([
                "Specification-Title"     : "ecbtcws",
                "Specification-Vendor"    : "ecbtcwssareus",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "ecbtcwssareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0,
                "MixinConfigs": "ecbtcws.mixins.json",
        ])
    }
    //duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
